# Generated by Django 4.2.18 on 2025-02-04 03:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='recipes.category')),
            ],
            options={
                'verbose_name_plural': 'categories',
            },
        ),
        migrations.CreateModel(
            name='Glossary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('singular_name', models.CharField(default='', help_text="The singular form of the term (e.g., 'egg')", max_length=200)),
                ('plural_name', models.CharField(default='', help_text="The plural form of the term (e.g., 'eggs')", max_length=200)),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Glossary Term',
                'verbose_name_plural': 'Glossary Terms',
            },
        ),
        migrations.CreateModel(
            name='GlossaryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=300, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=350, null=True, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_on', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Glossary Category',
                'verbose_name_plural': ' Glossary Categories',
            },
        ),
        migrations.CreateModel(
            name='Nutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the nutrient (e.g., 'Calories', 'Fat')", max_length=100, unique=True)),
                ('unit', models.CharField(help_text="Unit of measurement (e.g., 'kcal', 'g', 'mg', 'mcg')", max_length=20)),
                ('nutrient_type', models.CharField(choices=[('macro', 'Macronutrient'), ('micro', 'Micronutrient'), ('vitamin', 'Vitamin'), ('mineral', 'Mineral'), ('other', 'Other')], default='other', help_text='Type of nutrient', max_length=10)),
            ],
            options={
                'verbose_name': 'Nutrient',
                'verbose_name_plural': 'Nutrients',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(max_length=400, null=True, verbose_name='Recipe Name (English)')),
                ('slug', models.SlugField(blank=True, max_length=450, null=True, unique=True, verbose_name='Slug (English)')),
                ('title', models.CharField(max_length=400, null=True)),
                ('description', models.TextField()),
                ('ingredients_text', models.TextField(default='', help_text='Enter ingredients with quantities. Terms in [brackets] will be linked to glossary.')),
                ('instructions', models.TextField()),
                ('preparation_time', models.PositiveIntegerField(help_text='Time in minutes')),
                ('cooking_time', models.PositiveIntegerField(help_text='Time in minutes')),
                ('servings', models.PositiveIntegerField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes/')),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('code', models.CharField(blank=True, max_length=300, null=True, unique=True, verbose_name='Recipe Code')),
                ('views_count', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='Views Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.IntegerField(choices=[(0, 'Draft'), (1, 'Publish')], default=0)),
                ('categories', models.ManyToManyField(related_name='recipes', to='recipes.category')),
                ('related_recipes', models.ManyToManyField(blank=True, related_name='related_to', to='recipes.recipe')),
                ('related_terms', models.ManyToManyField(blank=True, related_name='recipes', to='recipes.glossary')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecipeReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the reviewer if not logged in', max_length=100, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email of the reviewer if not logged in', max_length=254, null=True)),
                ('rating', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], default=5)),
                ('review_text', models.TextField(blank=True, null=True)),
                ('ip', models.CharField(blank=True, max_length=20)),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='recipes.recipe')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('recipe', 'email'), ('recipe', 'user')},
            },
        ),
        migrations.CreateModel(
            name='ReviewReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply_text', models.TextField()),
                ('ip', models.CharField(blank=True, max_length=20)),
                ('is_approved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='recipes.recipereview')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='GlossaryNutrient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField(default=0, help_text='Value per 100g')),
                ('glossary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.glossary')),
                ('nutrient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recipes.nutrient')),
            ],
            options={
                'verbose_name': 'Glossary Nutrient',
                'verbose_name_plural': 'Glossary Nutrients',
                'unique_together': {('glossary', 'nutrient')},
            },
        ),
        migrations.AddField(
            model_name='glossary',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipes.glossarycategory'),
        ),
        migrations.AddField(
            model_name='glossary',
            name='nutrients',
            field=models.ManyToManyField(related_name='glossary_items', through='recipes.GlossaryNutrient', to='recipes.nutrient'),
        ),
        migrations.AddField(
            model_name='glossary',
            name='parent',
            field=mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='recipes.glossary'),
        ),
    ]
